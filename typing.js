module.exports = [
    "ReactDOM.render(<App />, document.getElementById('root'));",
    "const headers = ['Band', 'Singer', 'Inception', 'Label'];",
    "font-size: calc(1rem + 0.5vw);",
    "@media (max-width: 400px) {",
    "border: 2px solid #000;",
    "tr:first-of-type th:not(:last-child) {",
    "padding: 0.125rem 0.5rem;",
    "import { mergeOptions } from '../util/index'",
    "if (typeof plugin.install === 'function') {",
    "plugin.apply(null, args)",
    '<html lang="en-US">',
    '<meta name="robots" content="index, follow" />',
    "var disableStr = 'ga-disable-UA-42425022-1';",
    'padding: 10px 20px 15px;',
    '.dark-line {border-color: #d2d2d2 !important;}',
    'const x = 2;',
    '{ "name": "Robert", "creator": true }',
    'function sum(x,y) { return x + y; }',  
    'font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;',
    '.form-group.required .control-label:after {',
    '<p><strong>Learning and Knowledge</strong></p>',
    '<!-- .mega-menu__section -->',
    '<section class="mega-menu__section" aria-labelledby="Other">',
    '<li class="sub-menu__item">',
    '<div class="col-sm-4">',
    '<label for="form-contact-lastname">Last Name</label>',
    'id="form-contact-lastname" type="text" name="lastname"',
    '<h2 class="whiteh2" style="padding-right:5px;">',
    '<a class="btn btn-primary" href="https://rmion.com">',
    'data-tweet-limit="1" data-theme="dark"',
    '<span class="fa fa-question-circle" aria-hidden="true">',
    "var navId = buttonEl.getAttribute('aria-controls');",
    'buttonEl.setAttribute("aria-expanded", "false");',
    "navLinks[a].setAttribute('aria-current','true');",
    'for (var b = 0; b < navItems.length; b++) {',
    "a=o.getElementsByTagName('head')[0];",
    '<meta charset="utf-8" />',
    "import ReactDOM from 'react-dom'",
    "<Form handleSubmit={this.handleSubmit} />",
    '<input type="button" value="Submit" onClick={this.sendForm} />',
    "const citrusFruits = ['orange', 'lime', 'mandarin']",
    "const doubled = numbers.map((number) => number * 2);",
    "let newLength = fruits.unshift('Strawberry')",
    "console.log(arr[arr.length - 1])",
    "console.log(years['2'] != years['02'])",
    "alert( arr.concat([3, 4], [5, 6]) );",
    "arr.forEach(function(item, index, array) {",
    "let user = users.find(item => item.id == 1);",
    "const doubleList = list => list.map(x => x * 2);",
    "setTimeout(() => resolve(value), 3000);",
    "const fetchDataQuickly = async time => {",
    '<td id="mp-right" class="MainPageBG mp-bordered">',
    '<footer id="footer" class="mw-footer" role="contentinfo" >',
    '<form action="/w/index.php" id="searchform">',
    "let x, y = 20;",
    "let [a, b, c] = [5, 8, 12];",
    "let result = marks >= 30 ? 'Pass' : 'Fail';",
    "let imagePath = getImagePath() || 'default.jpg';",
    "[x, y] = [y, x];",
    "const add = (num1, num2) => num1 + num2;",
    "console.log(`Missed call from ${number} at ${time}`);",
    "if ([1, 'one', 2, 'two'].includes(value)) {",
    "let average = +'42.6';",
    "'sorry\\n'.repeat(100);",
    "const arr = [2, 8, 15, 4]; Math.max(...arr);",
    "for (const val of arr) { console.log(val); }",
    "let arr2 = [...arr1, 60, 80];",
    "const cloneObj = JSON.parse(JSON.stringify(obj));",
    "let obj = {x: 20, y: 'hello'}; const cloneObj = {...obj};",
    "console.error('Error found');",
    "console.table({a: 1, b: 2, c: 3});",
    "for(let i=0; i<3; i++){ console.count(i); }",
    "console.log('%cI am a styled log', styles);",
    '<h1 class="text-3xl font-bold leading-tight text-gray-900">',
    '<div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">',
    '<path stroke-linecap="round" stroke-linejoin="round"',
    '<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24"',
    '<div class="pt-4 pb-3 border-t border-gray-700">',
    '<span class="sr-only">Open user menu</span>',
    '<button class="bg-gray-800 p-1 text-gray-400 hover:text-white',
    '<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">',
    '<dt class="text-sm font-medium text-gray-500">',
    '<dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">',
    '<li class="pl-3 pr-4 py-3 flex items-center justify-between">',
    ' <a href="#" class="text-indigo-600 hover:text-indigo-500">',
    '<th scope="col" class="px-6 py-3 text-left text-xs',
    '<span class="sr-only">Edit</span>',
    '<td class="px-6 py-4 whitespace-nowrap">',
    '<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">',
    '<label for="about" class="block font-medium text-gray-700">',
    '<p class="mt-2 text-sm text-gray-500">',
    '<input type="text" name="first_name" id="first_name"',
    '<select id="country" name="country" autocomplete="country"',
    '<button type="submit" class="inline-flex justify-center py-2',
    '<legend class="text-base font-medium text-gray-900">',
    '<form action="#" method="POST">',
    'class="focus:ring-indigo-500 text-indigo-600 border-gray-300"',
    '<li class="list-group-item active" aria-current="true">',
    '<a href="#" class="list-group-item list-group-item-action">',
    '<span class="badge bg-primary rounded-pill">14</span>',
    '<div class="d-flex w-100 justify-content-between">',
    '<small class="text-muted">And some muted small print.</small>',
    '<input class="form-check-input me-1" type="checkbox" value=""',
    '<button class="carousel-control-prev" type="button"',
    '<a class="nav-link active" aria-current="page" href="#">',
    '<div class="spinner-border text-success" role="status">',
    '[].slice.call(document.querySelectorAll(',
    'tooltipTriggerList.map(function (tooltipTriggerEl) {',
    'return new bootstrap.Tooltip(tooltipTriggerEl)',
    'var exampleEl = document.getElementById("example")',
    '<nav aria-label="Page navigation example">',
    '<a class="page-link" href="#" aria-label="Next">',
    '<label for="staticEmail" class="col-sm-2 col-form-label">',
    '<input type="password" class="form-control" id="inputPW">',
    '<datalist id="datalistOptions">',
    'return _sum.apply(this, arguments);',
    'try { var info = gen[key](arg); var value = info.value;',
    'catch (error) { reject(error); return; }',
    'Promise.resolve(value).then(_next, _throw);',
    'Array.prototype.includes.call(arguments, "a")',
    'Array.from(images, image => image.src);',
    'const range = (start, stop, step) => Array.from({ length:',
    "range('A'.charCodeAt(0), 'Z'.charCodeAt(0), 1)",
    'var isCallable = function (fn) {',
    "symbolIterator = 'Symbol(Symbol.iterator)';",
    'var maxSafeInteger = Math.pow(2, 53) - 1;',
    'return Math.min(Math.max(len, 0), maxSafeInteger);',
    'function setGetItemHandler(isIterator, items) {',
    'return isIterator ? iterator.next() : items[k];',
    'while (k < len || isIterator) {',
    "typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(",
    'arguments.length > 1 ? arguments[1] : void undefined;',
    'isCallable(C) ? Object(new C(len)) : new Array(len);',
    'return d > 0 ? arr.reduce((acc, val) => acc.concat(',
    'const next = stack.pop();',
    'if(Array.isArray(item) && depth > 0) {',
    'const flattened = [...flatten(arr, Infinity)];',
    'if (!Array.prototype.findIndex) {',
    '// 2. Let len be ? ToLength(? Get(0, "length")).',
    'if (predicate.call(thisArg, kValue, k, o)) {',
    'var o = Object(this);',
    "throw new TypeError('\"this\" is null or not defined');",
    'len = t.length >>> 0, k = len - 1, value;',
    '.alert ul, .alert p, .warning ul, .warning p {',
    'h2 + p { border-top: 1px solid gray; }',
    '@mixin define-emoji($name, $glyph) {',
    'span.emoji-women-holding-hands {',
    '$border-dark: rgba($base-color, 0.88);',
    '$primary: #81899b; :root { --primary: #{$primary}; }',
    "const colors = require('tailwindcss/colors')"
]